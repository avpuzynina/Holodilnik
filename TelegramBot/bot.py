import logging
import re
import tempfile

import pandas as pd
import PIL
import torch
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from PIL import Image

logging.basicConfig(level=logging.INFO, filename="logfile.log")
model = torch.hub.load(
    "ultralytics/yolov5",
    "custom",
    path="/home/anna/Holodilnik/models/best_yolo_large_460.pt",
)
df = pd.read_csv(
    "/home/anna/Holodilnik/recipes_text/recipes_zelen.csv", index_col="Unnamed: 0"
)
df_corr = pd.read_csv(
    "/home/anna/Holodilnik/recipes_text/all_receipts_correlation_updated_zelen.csv",
    index_col="Unnamed: 0",
)


# Initialize bot and dispatcher
bot = Bot(token="")
dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    user_name = message.from_user.first_name
    text = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üçï\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞—Å—Ç —Ç–µ–±–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–≤–æ–µ–≥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞.".format(
        message
    )
    text_2 = "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–æ–µ–≥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞:"
    user_id = message.from_user.id
    logging.info(f"{user_name} {user_id} send message: {message.text}")
    await message.answer(text)
    await message.answer(text_2)


@dp.message_handler(content_types=["photo"])
async def get_photo(message: types.Message):
    with tempfile.NamedTemporaryFile() as tmpfile:
        await message.photo[-1].download(destination_file=tmpfile.name)
        img = PIL.Image.open(tmpfile.name)
    results = model(img)
    photo_products = set(results.pandas().xyxy[0]["name"])
    products = translate_products(photo_products)
    if len(products) != 0:
        recipes_indexes, warning = recomend_sistem(products)
        name_recipes = []
        for i in recipes_indexes:
            name_recipes.append((df.iloc[i]["name"], i))
        keybord = create_keybord_recipes(name_recipes)
        text1 = "–í–∞—à–∏ —Ä–µ—Ü–µ–ø—Ç—ã:" + "\n" + warning
        await message.answer(text1, reply_markup=keybord)
    else:
        empty_warning = "–ò–∑–≤–∏–Ω–∏—Ç–µ,—è –º–æ—Ä–≥–Ω—É–ª, —Å–¥–µ–ª–∞–π—Ç–µ –µ—â—ë –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!"
        await message.answer(empty_warning)


def create_keybord_recipes(recipies):
    inline_kb = InlineKeyboardMarkup()
    for name, id_name in recipies:
        inline_btn = InlineKeyboardButton(name, callback_data=f"recipe_{id_name}")
        inline_kb.add(inline_btn)
    return inline_kb


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("recipe"))
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    index_out = int(callback_query.data.split("_")[1])
    recipe_out = (
        df.iloc[index_out]["name"]
        + "\n"
        + "\n"
        + df.iloc[index_out]["ingridients"]
        + "\n"
        + df.iloc[index_out]["instruction"]
        + "\n"
        + df.iloc[index_out]["url"]
    )
    keybord = InlineKeyboardMarkup()
    inline_btn = InlineKeyboardButton(
        "5 –ø–æ—Ö–æ–∂–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤", callback_data=f"similar_{index_out}"
    )
    keybord.add(inline_btn)
    await bot.send_message(
        callback_query.from_user.id, recipe_out, reply_markup=keybord
    )


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("similar"))
async def process_callback_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    index_rec = callback_query.data.split("_")[1]
    list_recommend = df_corr[index_rec].nlargest(n=6).index.tolist()[1:]
    name_recipes = []
    for i in list_recommend:
        name_recipes.append((df.iloc[i]["name"], i))
    keybord1 = create_keybord_recipes(name_recipes)
    await bot.send_message(
        callback_query.from_user.id, "5  –ø–æ—Ö–æ–∂–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤", reply_markup=keybord1
    )


def translate_products(photo_products):
    dict_products_translate = {
        "arbuz": "–ê—Ä–±—É–∑",
        "avokado": "–ê–≤–æ–∫–∞–¥–æ",
        "ananas": "–ê–Ω–∞–Ω–∞—Å",
        "apelsin": "–ê–ø–µ–ª—å—Å–∏–Ω—ã",
        "banan": "–ë–∞–Ω–∞–Ω—ã",
        "vinograd": "–í–∏–Ω–æ–≥—Ä–∞–¥",
        "vishnya": "–í–∏—à–Ω—è",
        "grusha": "–ì—Ä—É—à–∏",
        "yabloko": "–Ø–±–ª–æ–∫–æ",
        "klubnika": "–ö–ª—É–±–Ω–∏–∫–∞",
        "laim": "–õ–∞–π–º",
        "limon": "–õ–∏–º–æ–Ω",
        "mandarin": "–ú–∞–Ω–¥–∞—Ä–∏–Ω—ã",
        "mango": "–ú–∞–Ω–≥–æ",
        "malina": "–ú–∞–ª–∏–Ω–∞",
        "persiki": "–ü–µ—Ä—Å–∏–∫–∏",
        "sliva": "–°–ª–∏–≤—ã",
        "baklazhan": "–ë–∞–∫–ª–∞–∂–∞–Ω—ã",
        "kapusta": "–ö–∞–ø—É—Å—Ç–∞",
        "goroshek": "–ì–æ—Ä–æ—à–µ–∫",
        "imbir": "–ò–º–±–∏—Ä—å",
        "kitayskaya pekinskaya kapusta": "–ö–∏—Ç–∞–π—Å–∫–∞—è –ø–µ–∫–∏–Ω—Å–∫–∞—è –∫–∞–ø—É—Å—Ç–∞",
        "kabachok": "–ö–∞–±–∞—á–∫–∏",
        "olivki": "–û–ª–∏–≤–∫–∏",
        "luk repchatiy": "–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π",
        "krasnokochannaya kapusta": "–ö—Ä–∞—Å–Ω–æ–∫–æ—á–∞–Ω–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞",
        "kartofel": "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å",
        "brokkoli": "–ë—Ä–æ–∫–∫–æ–ª–∏",
        "luk krasniy": "–õ—É–∫ –∫—Ä–∞—Å–Ω—ã–π",
        "luk-porey": "–õ—É–∫-–ø–æ—Ä–µ–π",
        "maslini": "–ú–∞—Å–ª–∏–Ω—ã",
        "ogurtsi": "–û–≥—É—Ä—Ü—ã",
        "marinovannie ogurtsi": "–ú–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–µ –æ–≥—É—Ä—Ü—ã",
        "morkov": "–ú–æ—Ä–∫–æ–≤—å",
        "perets chili": "–ü–µ—Ä–µ—Ü —á–∏–ª–∏",
        "pomidori cherri": "–ü–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏",
        "pomidori": "–ü–æ–º–∏–¥–æ—Ä—ã",
        "redis": "–†–µ–¥–∏—Å",
        "bolgarskiy perets": "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü",
        "selderey": "–°–µ–ª—å–¥–µ—Ä–µ–π",
        "kukuruza": "–ö—É–∫—É—Ä—É–∑–∞",
        "svekla": "–°–≤–µ–∫–ª–∞",
        "tykva": "–¢—ã–∫–≤–∞",
        "tsvetnaya kapusta": "–¶–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞",
        "chesnok": "–ß–µ—Å–Ω–æ–∫",
        "gribi": "–ì—Ä–∏–±—ã",
        "shampinyoni": "–®–∞–º–ø–∏–Ω—å–æ–Ω—ã",
        "yogurt": "–ô–æ–≥—É—Ä—Ç",
        "kurinoye yaytso": "–ö—É—Ä–∏–Ω–æ–µ —è–π—Ü–æ",
        "kefir": "–ö–µ—Ñ–∏—Ä",
        "moloko": "–ú–æ–ª–æ–∫–æ",
        "slivki": "–°–ª–∏–≤–∫–∏",
        "slivochnoye maslo": "–°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ",
        "sgushennoye moloko": "–°–≥—É—â–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ",
        "tvorog": "–¢–≤–æ—Ä–æ–≥",
        "slivochniy sir": "–°–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä –º–∞—Å–∫–∞—Ä–ø–æ–Ω–µ",
        "mozzarella": "–°—ã—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞",
        "brynza": "–°—ã—Ä –±—Ä—ã–Ω–∑–∞",
        "tverdiy sir": "–¢–≤–µ—Ä–¥—ã–π —Å—ã—Ä",
        "bekon": "–ë–µ–∫–æ–Ω",
        "vetchina": "–í–µ—Ç—á–∏–Ω–∞",
        "myaso": "–ú—è—Å–æ",
        "sosiski": "–°–æ—Å–∏—Å–∫–∏",
        "farsh": "–§–∞—Ä—à",
        "kuritsa": "–ö—É—Ä–∏—Ü–∞",
        "krevetki": "–ö—Ä–µ–≤–µ—Ç–∫–∏",
        "riba": "–†—ã–±–∞",
        "tomatnaya pasta": "–¢–æ–º–∞—Ç–Ω–∞—è –ø–∞—Å—Ç–∞",
        "hleb": "–•–ª–µ–±",
        "gorchitsa": "–ì–æ—Ä—á–∏—Ü–∞",
        "smetana": "–°–º–µ—Ç–∞–Ω–∞",
        "ketchup": "–ö–µ—Ç—á—É–ø",
        "mayonez": "–ú–∞–π–æ–Ω–µ–∑",
        "med": "–ú–µ–¥",
        "bazilik": "–ë–∞–∑–∏–ª–∏–∫",
        "zelen": "–ó–µ–ª–µ–Ω—å",
        "zelyoniy luk": "–ó–µ–ª–µ–Ω—ã–π –ª—É–∫",
        "zelyoniy salat": "–ó–µ–ª–µ–Ω—ã–π —Å–∞–ª–∞—Ç",
        "petrushka": "–ü–µ—Ç—Ä—É—à–∫–∞",
        "rukola": "–†—É–∫–æ–ª–∞",
        "ukrop": "–£–∫—Ä–æ–ø",
        "kolbasa": "–ö–æ–ª–±–∞—Å–∞",
    }
    products_search = []
    for i in dict_products_translate.keys():
        if i in photo_products:
            products_search.append(dict_products_translate[i])

    products_search = set(products_search)
    return products_search


def recomend_sistem(products):
    resept_count = 0
    recipes_indexes = set()
    warning = ""
    for i in range(len(df["ingridients_superclean"])):
        ingr = set(re.split(r"\s+(?=[–ê-–Ø])", df["ingridients_superclean"][i]))
        if ingr == products:
            resept_count += 1
            recipes_indexes.add(i)
        if len(recipes_indexes) == 5:
            break

    if len(recipes_indexes) < 5:
        for i in range(len(df["ingridients_superclean"])):
            ingr = set(re.split(r"\s+(?=[–ê-–Ø])", df["ingridients_superclean"][i]))
            if products.issubset(ingr):
                count_less_products = len(ingr) - len(products)
                if count_less_products == 1:
                    resept_count += 1
                    recipes_indexes.add(i)
            if len(recipes_indexes) == 5:
                break

    if len(recipes_indexes) < 5:
        for i in range(len(df["ingridients_superclean"])):
            ingr = set(re.split(r"\s+(?=[–ê-–Ø])", df["ingridients_superclean"][i]))
            if products.issubset(ingr):
                count_less_products = len(ingr) - len(products)
                if count_less_products == 2:
                    resept_count += 1
                    recipes_indexes.add(i)
            if len(recipes_indexes) == 5:
                break

    if len(recipes_indexes) < 5:
        for i in range(len(df["ingridients_superclean"])):
            ingr = set(re.split(r"\s+(?=[–ê-–Ø])", df["ingridients_superclean"][i]))
            if products.issubset(ingr):
                count_less_products = len(ingr) - len(products)
                if count_less_products == 3:
                    resept_count += 1
                    recipes_indexes.add(i)
            if len(recipes_indexes) == 5:
                break

    if len(recipes_indexes) < 5:
        for i in range(len(df["ingridients_superclean"])):
            ingr = set(re.split(r"\s+(?=[–ê-–Ø])", df["ingridients_superclean"][i]))
            counter_products = len(products.intersection(ingr))
            count_less_products = len(ingr) - counter_products
            if counter_products != 0:
                if count_less_products == 1:
                    resept_count += 1
                    recipes_indexes.add(i)
            if len(recipes_indexes) == 5:
                break

    if len(recipes_indexes) < 5:
        for i in range(len(df["ingridients_superclean"])):
            ingr = set(re.split(r"\s+(?=[–ê-–Ø])", df["ingridients_superclean"][i]))
            counter_products = len(products.intersection(ingr))
            count_less_products = len(ingr) - counter_products
            if counter_products != 0:
                if count_less_products == 2:
                    resept_count += 1
                    recipes_indexes.add(i)
            if len(recipes_indexes) == 5:
                break

    if len(recipes_indexes) < 5:
        for i in range(len(df["ingridients_superclean"])):
            ingr = set(re.split(r"\s+(?=[–ê-–Ø])", df["ingridients_superclean"][i]))
            counter_products = len(products.intersection(ingr))
            count_less_products = len(ingr) - counter_products
            if counter_products != 0:
                if count_less_products == 3:
                    resept_count += 1
                    recipes_indexes.add(i)
                else:
                    warning = "–í–Ω–∏–º–∞–Ω–∏–µ! –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–æ–∫—É–ø–∞—Ç—å!"
                    for k in products:
                        if k in ingr:
                            resept_count += 1
                            recipes_indexes.add(i)
            if len(recipes_indexes) == 5:
                break

    return recipes_indexes, warning


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
